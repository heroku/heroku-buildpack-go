#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

TOOL=""
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
CURL="curl -s --retry 15 --retry-delay 2" # retry for up to 30 seconds

handleDefaultPkgSpec() {
    if [ "$pkgs" = "default" ];
    then
        warn "Installing package '.' (default)"
        if [ "$TOOL" = "govendor" ]
        then
          warn "To install a different package spec set 'heroku.install' in 'vendor/vendor.json'"
          warn ""
          warn "For more details see: https://devcenter.heroku.com/articles/go-apps-with-govendor#build-configuration"
          warn ""
        fi
        pkgs="."
    fi
}

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlfor() {
    ver=$1
    file=$2
    case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
        echo https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/go/$file
        ;;
    *)
        echo https://storage.googleapis.com/golang/$file
        ;;
    esac
}

DEFAULT_GO_VERSION="go1.6"

# Expand to supported versions of Go, (e.g. expand "go1.5" to latest release go1.5.2)
# All specific or other versions, take as is.
expand_ver() {
  case $1 in
    go1.6)
      echo "go1.6.1"
      ;;
    go1.5)
      echo "go1.5.4"
      ;;
    go1.4)
      echo "go1.4.3"
      ;;
    *)
      echo "$1"
      ;;
  esac
}

# Report deprecated versions to user
# Use after expand_ver
report_ver() {
  case $1 in
    go1.6.1|go1.5.4)
      # Noop
    ;;
    *)
      warn ""
      warn "Deprecated or unsupported version of go ($1)"
      warn "See https://devcenter.heroku.com/articles/go-support#go-versions for supported version information."
      warn ""
    ;;
  esac
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$3
buildpack=$(cd "$(dirname $0)/.." && pwd)
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
venv=$cache/venv
mkdir -p $cache/pip
python=python2.7
PATH=$buildpack/$plat/bin:$venv/bin:$PATH
steptxt="----->"

warn() {
    echo -e >&2 "${YELLOW} !     $@${NC}"
}

step() {
    echo "$steptxt $@"
}

start() {
    echo -n "$steptxt $@... "
}

finished() {
    echo "done"
}

# Default to $SOURCE_VERSION environment variable
GO_LINKER_VALUE=${SOURCE_VERSION}

# allow apps to specify cgo flags and set up /app symlink so things like CGO_CFLAGS=-I/app/... work
if [ ! -z "$env_dir" ]
then
    mkdir -p "$env_dir"
    env_dir=$(cd "$env_dir/" && pwd)
    ln -sfn $build /app/code
  for key in CGO_CFLAGS CGO_CPPFLAGS CGO_CXXFLAGS CGO_LDFLAGS GO_LINKER_SYMBOL GO_LINKER_VALUE GO15VENDOREXPERIMENT GOVERSION
    do
        if [ -f "$env_dir/$key" ]
        then
            export "$key=$(cat "$env_dir/$key")"
        fi
    done
fi

if test -f "$build/Godeps/Godeps.json"
then
    TOOL="godep"
    step "Checking Godeps/Godeps.json file."
    if ! jq -r . < "$build/Godeps/Godeps.json" > /dev/null
    then
        warn "Bad Godeps/Godeps.json file"
        exit 1
    fi
    name=$(<$build/Godeps/Godeps.json jq -r .ImportPath)
    ver=$(<$build/Godeps/Godeps.json jq -r .GoVersion)
elif (test -d "$build/src" && test -n "$(find "$build/src" -type f -name '*.go' | sed 1q)")
then
    TOOL="gb"
    ver=${GOVERSION:-$DEFAULT_GO_VERSION}
elif test -f "$build/vendor/vendor.json"
then
    f="$build/vendor/vendor.json"
    TOOL="govendor"
    step "Checking vendor/vendor.json file."
    if ! jq -r . < "$f" > /dev/null
    then
        warn "Bad vendor/vendor.json file"
        warn "For more details see: FIXME"
        exit 1
    fi
    name=$(<$f jq -r .rootPath)
    if [ "$name" = "null" -o -z "$name" ]
    then
        warn "The 'rootPath' field not specified in 'vendor/vendor.json'."
        warn "'rootPath' must be set to the root package name used by your repository."
        warn "Recent versions of govendor add this field automatically, please upgrade"
        warn "and re-run 'govendor init'."
        warn ""
        warn "For more details see: https://devcenter.heroku.com/articles/go-apps-with-govendor#build-configuration"
        exit 1

    fi
    ver=$(<$f jq -r .heroku.goVersion)
    if [ "$ver" =  "null" -o -z "$ver" ]
    then
      ver=${GOVERSION:-$DEFAULT_GO_VERSION}
      warn "The 'heroku.goVersion' field is not specified in 'vendor/vendor.json'."
      warn ""
      warn "Defaulting to $ver"
      warn ""
      warn "For more details see: https://devcenter.heroku.com/articles/go-apps-with-govendor#build-configuration"
      warn ""
    fi
else
    warn "Godep or GB are required. For instructions:"
    warn "https://devcenter.heroku.com/articles/go-support"
    exit 1
fi

ver=$(expand_ver $ver)

file=${GOFILE:-$ver.linux-amd64.tar.gz}
url=${GOURL:-$(urlfor $ver $file)}

if test -e $build/bin && ! test -d $build/bin
then
    warn ""
    warn "File bin exists and is not a directory."
    warn ""
    exit 1
fi

report_ver $ver

if test -d $cache/$ver/go
then
    step "Using $ver"
else
    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/$ver
    cd $cache/$ver
    start "Installing $ver"
        $CURL $url | tar zxf -
    finished
    cd - >/dev/null
fi

mkdir -p $build/bin
GOROOT=$cache/$ver/go export GOROOT

# If $GO_LINKER_SYMBOL and GO_LINKER_VALUE are set, tell the linker to DTRT
FLAGS=(-tags heroku)
if [ -n "$GO_LINKER_SYMBOL" -a -n "$GO_LINKER_VALUE" ]
then
    case $ver in
    go1.5*|go1.6*)
        xval="$GO_LINKER_SYMBOL=$GO_LINKER_VALUE"
        ;;
    *)
        xval="$GO_LINKER_SYMBOL $GO_LINKER_VALUE"
        ;;
    esac
    FLAGS=(${FLAGS[@]} -ldflags "-X $xval")
fi

# GB installation
case $TOOL in
    godep)
        GOBIN=$build/bin export GOBIN
        GOPATH=$build/.heroku/go export GOPATH
        PATH=$GOROOT/bin:$PATH

        p=$GOPATH/src/$name
        mkdir -p $p
        cp -R $build/* $p

        pkgs=$(<$build/Godeps/Godeps.json jq -r 'if .Packages then .Packages | join(" ") else "default" end')
        handleDefaultPkgSpec

        case $ver in
        go1.5*)
            if test "$GO15VENDOREXPERIMENT" = "1"
            then
                warn ""
                warn "\$GO15VENDOREXPERIMENT=1. This is an experiment. Things may not work as expected."
                warn "See https://devcenter.heroku.com/articles/go-support#go-1-5-vendor-experiment for more info."
                warn ""
                if test ! -d "$build/vendor"
                then
                    warn ""
                    warn "vendor/ directory does not exist."
                    warn ""
                    exit 1
                fi
                VendorExperiment="true"
            fi
        ;;
        go1.6*)
            if test "$GO15VENDOREXPERIMENT" = "0"
            then
                VendorExperiment="false"
            else
                VendorExperiment="true"
            fi
        ;;
        *)
            VendorExperiment="false"
        ;;
        esac

        unset GIT_DIR # unset git dir or it will mess with goinstall
        cd $p
        if test "$VendorExperiment" = "true"
        then
            step "Running: go install -v ${FLAGS[@]} $pkgs"
            go install -v "${FLAGS[@]}" $pkgs
        else
            step "Running: godep go install ${FLAGS[@]} $pkgs"
            godep go install "${FLAGS[@]}" $pkgs
        fi
    ;;
    govendor)
        GOBIN=$build/bin export GOBIN
        GOPATH=$build/.heroku/go export GOPATH
        PATH=$GOROOT/bin:$PATH

        p=$GOPATH/src/$name
        mkdir -p $p
        cp -R $build/* $p

        pkgs=$(<$build/vendor/vendor.json jq -r 'if .heroku.install then .heroku.install | join(" ") else "default" end')
        handleDefaultPkgSpec

        unset GIT_DIR # unset git dir or it will mess with goinstall
        cd $p
        step "Running: go install -v ${FLAGS[@]} $pkgs"
        go install -v "${FLAGS[@]}" $pkgs
    ;;
    gb)
        warn ""
        warn "GB support is in beta"
        warn "Please see https://devcenter.heroku.com/articles/go-dependencies-via-gb for more info"
        warn "For support please file a support issue: https://help.heroku.com"
        warn ""

        gbver="0.4.0"
        GOPATH="$cache/gb/$gbver" export GOPATH
        PATH=$GOPATH/bin:$GOROOT/bin:$PATH export PATH
        cp="$GOPATH/src/github.com/constabulary"
        if test -d "$GOPATH"
        then
            step "Using GB $gbver"
        else
            rm -rf "$cache/gb/*" # cruft bad
            mkdir -p "$cp"
            cd $cp
            start "Installing GB v$gbver"
            $CURL "https://codeload.github.com/constabulary/gb/tar.gz/v$gbver" | tar zxf -
            mv gb-$gbver gb
            go install ./...
            finished
        fi

        cd $build
        step "Running: gb build ${FLAGS[@]}"
        gb build "${FLAGS[@]}"

        step "Post Compile Cleanup"
        for f in bin/*-heroku; do mv "$f" "${f/-heroku}"; done
        rm -rf pkg
    ;;
esac

rm -rf $build/.heroku

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh
cp $buildpack/vendor/concurrency.sh $build/.profile.d/
