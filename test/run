#!/usr/bin/env bash
# See README.md for info on running these tests.

testTestGovendorWithTests() {
  dotest "govendor-with-tests"
  assertCapturedSuccess
  assertCaptured "RUN   TestHello"
  assertCaptured "PASS: TestHello"
  assertCaptured "RUN   ExampleHello"
  assertCaptured "PASS: ExampleHello"
  assertCaptured "BenchmarkHello"
}
testTestGlideWithTests() {
  dotest "glide-with-tests"
  assertCapturedSuccess
  assertCaptured "RUN   TestHello"
  assertCaptured "PASS: TestHello"
  assertCaptured "RUN   ExampleHello"
  assertCaptured "PASS: ExampleHello"
  assertCaptured "BenchmarkHello"
}
testTestGodepWithTests() {
  dotest "godep-with-tests"
  assertCapturedSuccess
  assertCaptured "RUN   TestHello"
  assertCaptured "PASS: TestHello"
  assertCaptured "RUN   ExampleHello"
  assertCaptured "PASS: ExampleHello"
  assertCaptured "BenchmarkHello"
}
testTestGBWithTests() {
  dotest "gb-with-tests"
  assertCapturedSuccess
  assertCaptured "RUN   TestHello"
  assertCaptured "PASS: TestHello"
  assertCaptured "RUN   ExampleHello"
  assertCaptured "PASS: ExampleHello"
  assertCaptured "BenchmarkHello"
}


testDetectGlideWithHgDep() {
  detect "glide-with-hg-dep"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGlideWithHgDep() {
  compile "glide-with-hg-dep"
  assertCaptured "Installing go"
  assertCaptured "Installing glide"
  assertCaptured "Fetching any unsaved dependencies (glide install)"
  assertCaptured "github.com/heroku/fixture/vendor/bitbucket.org/pkg/inflect"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testCompileGovendorCmds() {
  compile "govendor-cmd"
  assertCapturedSuccess
  assertCompiledBinaryExists "fixture"
  assertCompiledBinaryOutputs "fixture" "fixture"
  assertCompiledBinaryExists "other"
  assertCompiledBinaryOutputs "other" "other"
}
testCompileGovendorCmdsOverride() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo './cmd/fixture' > "${env_dir}/GO_INSTALL_PACKAGE_SPEC"
  compile "govendor-cmd" ${cache} ${env_dir}
  assertCapturedSuccess
  assertCaptured "Using \$GO_INSTALL_PACKAGE_SPEC override."
  assertCompiledBinaryExists "fixture"
  assertCompiledBinaryOutputs "fixture" "fixture"
  assertFileDoesNotExist "bin/other"
}

testCompileGodepCmds() {
  compile "godep-cmd"
  assertCapturedSuccess
  assertCompiledBinaryExists "fixture"
  assertCompiledBinaryOutputs "fixture" "fixture"
  assertCompiledBinaryExists "other"
  assertCompiledBinaryOutputs "other" "other"
}
testCompileGodepCmdsOverride() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo './cmd/fixture' > "${env_dir}/GO_INSTALL_PACKAGE_SPEC"
  compile "godep-cmd" ${cache} ${env_dir}
  assertCompiledBinaryExists "fixture"
  assertCompiledBinaryOutputs "fixture" "fixture"
  assertFileDoesNotExist "bin/other"
}

testCompileGodepBasicGo14WithGOVERSIONOverride() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo 'go1.6' > "${env_dir}/GOVERSION"
  compile "godep-basic-go14" ${cache} ${env_dir}
  assertCaptured "Installing go1.6"
  assertCaptured "Using \$GOVERSION override."
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileDoesNotExist ".profile.d/concurrency.sh"
}

testCompileGovendorGo14WithGOVERSIONOverride() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo 'go1.6' > "${env_dir}/GOVERSION"
  compile "govendor-go15" ${cache} ${env_dir}
  assertCaptured "Installing go1.6"
  assertCaptured "Using \$GOVERSION override."
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGlideMassageVendor() {
  detect "glide-massage-vendor"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGlideMassageVendor() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo '. github.com/mattes/migrate' > "${env_dir}/GO_INSTALL_PACKAGE_SPEC"
  compile "glide-massage-vendor" ${cache} ${env_dir}
  assertCaptured "Installing go"
  assertCaptured "Installing glide"
  assertCaptured "Fetching any unsaved dependencies (glide install)"
  assertCaptured "Running: go install -v -tags heroku . github.com/heroku/fixture/vendor/github.com/mattes/migrate"
  assertCaptured "github.com/heroku/fixture"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/fatih/color/vendor/github.com/mattn/go-colorable"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/fatih/color/vendor/github.com/mattn/go-isatty"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/fatih/color"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/migrate/direction"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/file"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/bash"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/gocql/gocql/internal/lru"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/golang/snappy"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/hailocab/go-hostpool"
  assertCaptured "github.com/heroku/fixture/vendor/gopkg.in/inf.v0"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/go-sql-driver/mysql"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/gocql/gocql"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/mysql"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/lib/pq/oid"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/lib/pq"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/cassandra"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/postgres"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattn/go-sqlite3"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/pipe"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/sqlite3"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/migrate"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertCompiledBinaryExists "migrate"
}

testDetectGlideWithOutDeps() {
  detect "glide-wo-deps"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGlideWithOutDeps() {
  compile "glide-wo-deps"
  assertCaptured "Installing go"
  assertCaptured "Installing glide"
  assertCaptured "Fetching any unsaved dependencies (glide install)"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGlideWithDeps() {
  detect "glide-with-deps"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGlideWithDeps() {
  compile "glide-with-deps"
  assertCaptured "Installing go"
  assertCaptured "Installing glide"
  assertCaptured "Fetching any unsaved dependencies (glide install)"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGlideBasic() {
  detect "glide-basic"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGlideBasic() {
  compile "glide-basic"
  assertCaptured "Installing go"
  assertCaptured "Installing glide"
  assertCaptured "Fetching any unsaved dependencies (glide install)"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}
testCompileGlideBasicWithTools() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "true" > "${env_dir}/GO_INSTALL_TOOLS_IN_IMAGE"
  compile "glide-basic" ${cache} ${env_dir}
  assertCaptured "Installing go"
  assertCaptured "Installing glide"
  assertCaptured "Fetching any unsaved dependencies (glide install)"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileExists ".heroku/go/bin/go"
}
testCompileGlideBasicInGOPATH() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "true" > "${env_dir}/GO_SETUP_GOPATH_IN_IMAGE"
  compile "glide-basic" ${cache} ${env_dir}
  assertCaptured "Installing go"
  assertCaptured "Installing glide"
  assertCaptured "Fetching any unsaved dependencies (glide install)"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileExists "src/github.com/heroku/fixture/main.go"
  assertFileDoesNotExist "main.go"
}

testDetectGodepVendorGo17() {
  detect "godep-vendor-go17"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepVendorGo17() {
  compile "godep-vendor-go17"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGodepBasicGo17() {
  detect "godep-basic-go17"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepBasicGo17() {
  compile "godep-basic-go17"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileDoesNotExist ".profile.d/concurrency.sh"
  assertCompiledBinaryOutputs "fixture" "go1.7beta1"
}
testCompileGodepBasicGo17WithGO15VENDOREXPERIMENT() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo '1' > "${env_dir}/GO15VENDOREXPERIMENT"
  compile "godep-basic-go17" ${cache} ${env_dir}
  assertCapturedError 1 "GO15VENDOREXPERIMENT is set, but is not supported by go1.7"
}

testDetectGovendorExcluded() {
  detect "govendor-excluded"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompuleGovendorExcluded() {
  compile "govendor-excluded"
  assertCaptured "Checking vendor/vendor.json file."
  assertCaptured "Installing go"
  assertCaptured "Installing govendor"
  assertCaptured "Installing package '.' (default)"
  assertCaptured "Fetching any unsaved dependencies (govendor sync)"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "github.com/heroku/fixture/vendor/github.com/heroku/slog"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGodepBasicGo14() {
  detect "godep-basic-go14"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepBasicGo14() {
  compile "godep-basic-go14"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileExists ".profile.d/concurrency.sh"
}

testDetectGodepCGOVendored(){
  detect "godep-cgo-vendored"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileCGOVendored() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo '-I${build_dir}/vendor/include' > "${env_dir}/CGO_CFLAGS"
  echo '-L${build_dir}/vendor/lib -lyara' > "${env_dir}/CGO_LDFLAGS"
  compile "godep-cgo-vendored" ${cache} ${env_dir}
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "github.com/heroku/fixture/vendor/github.com/hillu/go-yara"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGodepMassageVendor() {
  detect "godep-massage-vendor"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepMassageVendor() {
  compile "godep-massage-vendor"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku . github.com/heroku/fixture/vendor/github.com/mattes/migrate"
  assertCaptured "github.com/heroku/fixture"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattn/go-isatty"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/shiena/ansicolor"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/fatih/color"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/migrate/direction"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/file"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/bash"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/gocql/gocql/lru"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/golang/snappy"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/hailocab/go-hostpool"
  assertCaptured "github.com/heroku/fixture/vendor/gopkg.in/inf.v0"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/go-sql-driver/mysql"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/gocql/gocql"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/mysql"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/lib/pq/oid"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/lib/pq"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/cassandra"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/postgres"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattn/go-sqlite3"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/pipe"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver/sqlite3"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/driver"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate/migrate"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/mattes/migrate"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertCompiledBinaryExists "migrate"
}

testDetectGodepWithPackageNames() {
  detect "godep-with-package-names"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepWithPackageNames() {
  compile "godep-with-package-names"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertNotCaptured "Installing package '.' (default)"
  assertCaptured "Running: go install -v -tags heroku github.com/heroku/fixture/pkg"
  assertCaptured "github.com/heroku/fixture/vendor/github.com/heroku/slog"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists "pkg"
}

testDetectGodepCGOBasic() {
  detect "godep-cgo-basic"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepCGOB() {
  compile "godep-cgo-basic"
  assertCaptured "Installing go"
  assertCaptured "Installing package '.' (default)"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGodepDevelGo() {
  detect "godep-devel-go"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepDevelGo() {
  compile "godep-devel-go"
  assertCaptured "You are using a development build of Go."
  assertCaptured "Installing devel-15f7a66"
  assertCaptured "Installing bootstrap Go version go"
  assertCaptured "Compiling development Go version devel-15f7a66"
  assertCaptured "Installed Go for linux/amd64"
  assertCaptured "go version devel +15f7a66"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertTrue "Binary has the right value" '[[ "$(${compile_dir}/bin/fixture)" == *"devel +15f7a66"* ]]'
}

testDetectGodepBinFile() {
  detect "godep-bin-file"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepBinFile() {
  compile "godep-bin-file"
  assertCapturedError 1 "File bin exists and is not a directory."
}

testDetectGovendorMissingRootPath() {
  detect "govendor-missing-rootPath"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGovendorMissingRootPath() {
  compile "govendor-missing-rootPath"
  assertCapturedError 1 "The 'rootPath' field is not specified in 'vendor/vendor.json'."
}

testDetectGovendorMalformed() {
  detect "govendor-malformed"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGovendorMalformed() {
  compile "govendor-malformed"
  assertCapturedError 1 "Bad vendor/vendor.json file"
}

testDetectGodepMalformed() {
  detect "godep-malformed"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepMalformed() {
  compile "godep-malformed"
  assertCapturedError 1 "Bad Godeps/Godeps.json file"

}

testDetectGBVendor() {
  detect "gb-vendor"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGBVendor() {
  compile "gb-vendor"
  assertCaptured "Installing go"
  assertCaptured "Installing GB"
  assertCaptured "Running: gb build -tags heroku"
  assertCaptured "cmd/fixture"
  assertCaptured "Post Compile Cleanup"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGBBasic() {
  detect "gb-basic"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGBBasic() {
  compile "gb-basic"
  assertCaptured "Installing go"
  assertCaptured "Installing GB"
  assertCaptured "Running: gb build -tags heroku"
  assertCaptured "cmd/fixture"
  assertCaptured "Post Compile Cleanup"
  assertCapturedSuccess
  assertCompiledBinaryExists
}
testCompileGBBasicWithTools() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "true" > "${env_dir}/GO_INSTALL_TOOLS_IN_IMAGE"
  compile "gb-basic" ${cache} ${env_dir}
  assertCaptured "Installing go"
  assertCaptured "Installing GB"
  assertCaptured "Running: gb build -tags heroku"
  assertCaptured "cmd/fixture"
  assertCaptured "Post Compile Cleanup"
  assertCaptured "Copying go tool chain to"
  assertCaptured "Copying gb binary"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileExists ".heroku/go/bin/go"
}

testDetectGodepLDSymbolValue() {
  detect "godep-ld-symbol-value"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepLDSymbolValue() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "main.fixture" > "${env_dir}/GO_LINKER_SYMBOL"
  echo "fixture" > "${env_dir}/GO_LINKER_VALUE"
  compile "godep-ld-symbol-value" ${cache} ${env_dir}
  assertCaptured "Running: go install -v -tags heroku -ldflags -X main.fixture=fixture ."
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertTrue "Binary has the right value" '[ "$(${compile_dir}/bin/fixture)" = "fixture" ]'
}

# Older versions of Go have a different format for specifying linked flags
testDetectGodepLDSymbolGo14Value() {
  detect "godep-ld-symbol-value-go14"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepLDSymbolGo14Value() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "main.fixture" > "${env_dir}/GO_LINKER_SYMBOL"
  echo "fixture" > "${env_dir}/GO_LINKER_VALUE"
  compile "godep-ld-symbol-value-go14" ${cache} ${env_dir}
  assertCaptured "Running: godep go install -v -tags heroku -ldflags -X main.fixture fixture ."
  assertCaptured "Deprecated or unsupported version of go"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertTrue "Binary has the right value" '[ "$(${compile_dir}/bin/fixture)" = "fixture" ]'
}

testDetectGodepBasic() {
  detect "godep-basic"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepBasic() {
  compile "godep-basic"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileDoesNotExist ".profile.d/concurrency.sh"
}
testCompileGodepBasicWithTools() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "true" > "${env_dir}/GO_INSTALL_TOOLS_IN_IMAGE"
  compile "godep-basic" ${cache} ${env_dir}
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCaptured "Copying go tool chain to"
  assertCaptured "Copying godep binary"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileDoesNotExist ".profile.d/concurrency.sh"
  assertFileExists ".heroku/go/bin/go"
}
testCompileGodepBasicInGOPATH() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "true" > "${env_dir}/GO_SETUP_GOPATH_IN_IMAGE"
  compile "godep-basic" ${cache} ${env_dir}
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileDoesNotExist ".profile.d/concurrency.sh"
  assertFileExists "src/github.com/heroku/fixture/main.go"
  assertFileDoesNotExist "main.go"
}

testCompileGodepCreateProcfile() {
  compile "godep-basic-wo-procfile"
  assertCaptured "Installing go"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFile "web: fixture" "Procfile"
}

testDetectGovendorBasic() {
  detect "govendor-basic"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGovendorBasic() {
  compile "govendor-basic"
  assertCaptured "Checking vendor/vendor.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}
testCompileGovendorBasicWithTools() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "true" > "${env_dir}/GO_INSTALL_TOOLS_IN_IMAGE"
  compile "govendor-basic" ${cache} ${env_dir}
  assertCaptured "Checking vendor/vendor.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCaptured "Copying go tool chain to"
  assertCaptured "Copying govendor binary"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileExists ".heroku/go/bin/go"
}
testCompileGovendorBasicInGOPATH() {
  local cache=$(mktmpdir)
  local env_dir=$(mktmpdir)
  echo "true" > "${env_dir}/GO_SETUP_GOPATH_IN_IMAGE"
  compile "govendor-basic" ${cache} ${env_dir}
  assertCaptured "Checking vendor/vendor.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFileExists "src/github.com/heroku/fixture/main.go"
  assertFileDoesNotExist "main.go"
}

testCompileGovendorCreateProcfile() {
  compile "govendor-basic-wo-procfile"
  assertCaptured "Installing go"
  assertCapturedSuccess
  assertCompiledBinaryExists
  assertFile "web: fixture" "Procfile"
}

testDetectGodepOldWorkspace() {
  detect "godep-old-workspace"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepOldWorkspace() {
  compile "godep-old-workspace"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: godep go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGodepVendor() {
  detect "godep-vendor"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepVendor() {
  compile "godep-vendor"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ."
  assertCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

testDetectGodepPackageSpec() {
  detect "godep-package-spec"
  assertCaptured "Go"
  assertCapturedSuccess
}
testCompileGodepPackageSpec() {
  compile "godep-package-spec"
  assertCaptured "Checking Godeps/Godeps.json file."
  assertCaptured "Installing go"
  assertCaptured "Running: go install -v -tags heroku ./cmd/..."
  assertNotCaptured "Installing package '.' (default)"
  assertCaptured "github.com/heroku/fixture/cmd/fixture"
  assertCapturedSuccess
  assertCompiledBinaryExists
}

# Utils

pushd $(dirname 0) >/dev/null
popd >/dev/null

source $(pwd)/test/utils

mktmpdir() {
  dir=$(mktemp -t testXXXXX)
  rm -rf $dir
  mkdir $dir
  echo $dir
}

detect() {
  capture $(pwd)/bin/detect $(pwd)/test/fixtures/$1
}

compile_dir=""

default_process_types_cleanup() {
  file="/tmp/default_process_types"
  if [ -f "$file" ]; then
    rm "$file"
  fi
}

compile() {
  default_process_types_cleanup
  bp_dir=$(mktmpdir)
  compile_dir=$(mktmpdir)
  cp -a $(pwd)/* ${bp_dir}
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${2:-$(mktmpdir)} $3
}

dotest(){
  default_process_types_cleanup
  bp_dir=$(mktmpdir)
  compile_dir=$(mktmpdir)
  env_dir=$(mktmpdir)
  cp -a $(pwd)/* ${bp_dir}
  cp -a ${bp_dir}/test/fixtures/$1/. ${compile_dir}
  capture "${bp_dir}/bin/test-compile" "${compile_dir}" "${2:-$(mktmpdir)}" "${env_dir}"
  capture "${bp_dir}/bin/test" "${compile_dir}" "${env_dir}"
}

compileDir() {
  default_process_types_cleanup

  local bp_dir=$(mktmpdir)
  local compile_dir=${1:-$(mktmpdir)}
  local cache_dir=${2:-$(mktmpdir)}
  local env_dir=$3

  cp -a $(pwd)/* ${bp_dir}
  capture ${bp_dir}/bin/compile ${compile_dir} ${cache_dir} ${env_dir}
}

release() {
  bp_dir=$(mktmpdir)
  cp -a $(pwd)/* ${bp_dir}
  capture ${bp_dir}/bin/release ${bp_dir}/test/fixtures/$1
}

assertFile() {
  assertEquals "$1" "$(cat ${compile_dir}/$2)"
}

assertFileDoesNotExist() {
  local name=${1}
  local tgt="${compile_dir}/${name}"
  assertTrue "File ${name} does not exist" "[ ! -f ${tgt} ]"
}

assertFileExists() {
  local name=${1}
  local tgt="${compile_dir}/${name}"
  assertTrue "File ${name} exists" "[ -f ${tgt} ]"
}

assertCompiledBinaryExists() {
  local name=${1:-fixture}
  local tgt="${compile_dir}/bin/${name}"
  assertTrue "Compiled binary (${tgt}) exists" "[ -x ${tgt} ]"
}

assertCompiledBinaryOutputs() {
  local name=${1}
  local output=${2}
  capture ${compile_dir}/bin/${name}
}

source $(pwd)/test/shunit2